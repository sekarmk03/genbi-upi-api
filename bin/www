var app = require('../index');
var debug = require('debug')('opac:server');
var http = require('http');
// let https = require('https');
let fs = require('fs');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// const privateKey = fs.readFileSync('/etc/ssl/private/star_upi_edu.key', 'utf8');
// const certificate = fs.readFileSync('/etc/ssl/private/star_upi_edu.crt', 'utf8');

// const credentials = { key: privateKey, cert: certificate };

var server = http.createServer(app);
// const server = https.createServer(credentials, app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
